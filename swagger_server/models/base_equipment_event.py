# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.document_references import DocumentReferences  # noqa: F401,E501
from swagger_server.models.empty_indicator_code import EmptyIndicatorCode  # noqa: F401,E501
from swagger_server.models.equipment_event_type_code import EquipmentEventTypeCode  # noqa: F401,E501
from swagger_server.models.equipment_reference import EquipmentReference  # noqa: F401,E501
from swagger_server.models.iso_equipment_code import ISOEquipmentCode  # noqa: F401,E501
from swagger_server.models.reference import Reference  # noqa: F401,E501
from swagger_server.models.references import References  # noqa: F401,E501
from swagger_server.models.seal import Seal  # noqa: F401,E501
from swagger_server.models.seals import Seals  # noqa: F401,E501
from swagger_server.models.transport_call import TransportCall  # noqa: F401,E501
from swagger_server import util


class BaseEquipmentEvent(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, references: List[Reference]=None, seals: List[Seal]=None, event_classifier_code: str=None, equipment_event_type_code: EquipmentEventTypeCode=None, equipment_reference: EquipmentReference=None, iso_equipment_code: ISOEquipmentCode=None, empty_indicator_code: EmptyIndicatorCode=None, transport_call_id: Object=None, transport_call: TransportCall=None, document_references: DocumentReferences=None, event_type_code: str=None):  # noqa: E501
        """BaseEquipmentEvent - a model defined in Swagger

        :param references: The references of this BaseEquipmentEvent.  # noqa: E501
        :type references: List[Reference]
        :param seals: The seals of this BaseEquipmentEvent.  # noqa: E501
        :type seals: List[Seal]
        :param event_classifier_code: The event_classifier_code of this BaseEquipmentEvent.  # noqa: E501
        :type event_classifier_code: str
        :param equipment_event_type_code: The equipment_event_type_code of this BaseEquipmentEvent.  # noqa: E501
        :type equipment_event_type_code: EquipmentEventTypeCode
        :param equipment_reference: The equipment_reference of this BaseEquipmentEvent.  # noqa: E501
        :type equipment_reference: EquipmentReference
        :param iso_equipment_code: The iso_equipment_code of this BaseEquipmentEvent.  # noqa: E501
        :type iso_equipment_code: ISOEquipmentCode
        :param empty_indicator_code: The empty_indicator_code of this BaseEquipmentEvent.  # noqa: E501
        :type empty_indicator_code: EmptyIndicatorCode
        :param transport_call_id: The transport_call_id of this BaseEquipmentEvent.  # noqa: E501
        :type transport_call_id: Object
        :param transport_call: The transport_call of this BaseEquipmentEvent.  # noqa: E501
        :type transport_call: TransportCall
        :param document_references: The document_references of this BaseEquipmentEvent.  # noqa: E501
        :type document_references: DocumentReferences
        :param event_type_code: The event_type_code of this BaseEquipmentEvent.  # noqa: E501
        :type event_type_code: str
        """
        self.swagger_types = {
            'references': List[Reference],
            'seals': List[Seal],
            'event_classifier_code': str,
            'equipment_event_type_code': EquipmentEventTypeCode,
            'equipment_reference': EquipmentReference,
            'iso_equipment_code': ISOEquipmentCode,
            'empty_indicator_code': EmptyIndicatorCode,
            'transport_call_id': Object,
            'transport_call': TransportCall,
            'document_references': DocumentReferences,
            'event_type_code': str
        }

        self.attribute_map = {
            'references': 'references',
            'seals': 'seals',
            'event_classifier_code': 'eventClassifierCode',
            'equipment_event_type_code': 'equipmentEventTypeCode',
            'equipment_reference': 'equipmentReference',
            'iso_equipment_code': 'ISOEquipmentCode',
            'empty_indicator_code': 'emptyIndicatorCode',
            'transport_call_id': 'transportCallID',
            'transport_call': 'transportCall',
            'document_references': 'documentReferences',
            'event_type_code': 'eventTypeCode'
        }
        self._references = references
        self._seals = seals
        self._event_classifier_code = event_classifier_code
        self._equipment_event_type_code = equipment_event_type_code
        self._equipment_reference = equipment_reference
        self._iso_equipment_code = iso_equipment_code
        self._empty_indicator_code = empty_indicator_code
        self._transport_call_id = transport_call_id
        self._transport_call = transport_call
        self._document_references = document_references
        self._event_type_code = event_type_code

    @classmethod
    def from_dict(cls, dikt) -> 'BaseEquipmentEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The baseEquipmentEvent of this BaseEquipmentEvent.  # noqa: E501
        :rtype: BaseEquipmentEvent
        """
        return util.deserialize_model(dikt, cls)

    @property
    def references(self) -> List[Reference]:
        """Gets the references of this BaseEquipmentEvent.


        :return: The references of this BaseEquipmentEvent.
        :rtype: List[Reference]
        """
        return self._references

    @references.setter
    def references(self, references: List[Reference]):
        """Sets the references of this BaseEquipmentEvent.


        :param references: The references of this BaseEquipmentEvent.
        :type references: List[Reference]
        """

        self._references = references

    @property
    def seals(self) -> List[Seal]:
        """Gets the seals of this BaseEquipmentEvent.


        :return: The seals of this BaseEquipmentEvent.
        :rtype: List[Seal]
        """
        return self._seals

    @seals.setter
    def seals(self, seals: List[Seal]):
        """Sets the seals of this BaseEquipmentEvent.


        :param seals: The seals of this BaseEquipmentEvent.
        :type seals: List[Seal]
        """

        self._seals = seals

    @property
    def event_classifier_code(self) -> str:
        """Gets the event_classifier_code of this BaseEquipmentEvent.

        Code for the event classifier can be - PLN (Planned) - ACT (Actual) - EST (Estimated)   # noqa: E501

        :return: The event_classifier_code of this BaseEquipmentEvent.
        :rtype: str
        """
        return self._event_classifier_code

    @event_classifier_code.setter
    def event_classifier_code(self, event_classifier_code: str):
        """Sets the event_classifier_code of this BaseEquipmentEvent.

        Code for the event classifier can be - PLN (Planned) - ACT (Actual) - EST (Estimated)   # noqa: E501

        :param event_classifier_code: The event_classifier_code of this BaseEquipmentEvent.
        :type event_classifier_code: str
        """

        self._event_classifier_code = event_classifier_code

    @property
    def equipment_event_type_code(self) -> EquipmentEventTypeCode:
        """Gets the equipment_event_type_code of this BaseEquipmentEvent.


        :return: The equipment_event_type_code of this BaseEquipmentEvent.
        :rtype: EquipmentEventTypeCode
        """
        return self._equipment_event_type_code

    @equipment_event_type_code.setter
    def equipment_event_type_code(self, equipment_event_type_code: EquipmentEventTypeCode):
        """Sets the equipment_event_type_code of this BaseEquipmentEvent.


        :param equipment_event_type_code: The equipment_event_type_code of this BaseEquipmentEvent.
        :type equipment_event_type_code: EquipmentEventTypeCode
        """
        if equipment_event_type_code is None:
            raise ValueError("Invalid value for `equipment_event_type_code`, must not be `None`")  # noqa: E501

        self._equipment_event_type_code = equipment_event_type_code

    @property
    def equipment_reference(self) -> EquipmentReference:
        """Gets the equipment_reference of this BaseEquipmentEvent.


        :return: The equipment_reference of this BaseEquipmentEvent.
        :rtype: EquipmentReference
        """
        return self._equipment_reference

    @equipment_reference.setter
    def equipment_reference(self, equipment_reference: EquipmentReference):
        """Sets the equipment_reference of this BaseEquipmentEvent.


        :param equipment_reference: The equipment_reference of this BaseEquipmentEvent.
        :type equipment_reference: EquipmentReference
        """

        self._equipment_reference = equipment_reference

    @property
    def iso_equipment_code(self) -> ISOEquipmentCode:
        """Gets the iso_equipment_code of this BaseEquipmentEvent.


        :return: The iso_equipment_code of this BaseEquipmentEvent.
        :rtype: ISOEquipmentCode
        """
        return self._iso_equipment_code

    @iso_equipment_code.setter
    def iso_equipment_code(self, iso_equipment_code: ISOEquipmentCode):
        """Sets the iso_equipment_code of this BaseEquipmentEvent.


        :param iso_equipment_code: The iso_equipment_code of this BaseEquipmentEvent.
        :type iso_equipment_code: ISOEquipmentCode
        """

        self._iso_equipment_code = iso_equipment_code

    @property
    def empty_indicator_code(self) -> EmptyIndicatorCode:
        """Gets the empty_indicator_code of this BaseEquipmentEvent.


        :return: The empty_indicator_code of this BaseEquipmentEvent.
        :rtype: EmptyIndicatorCode
        """
        return self._empty_indicator_code

    @empty_indicator_code.setter
    def empty_indicator_code(self, empty_indicator_code: EmptyIndicatorCode):
        """Sets the empty_indicator_code of this BaseEquipmentEvent.


        :param empty_indicator_code: The empty_indicator_code of this BaseEquipmentEvent.
        :type empty_indicator_code: EmptyIndicatorCode
        """
        if empty_indicator_code is None:
            raise ValueError("Invalid value for `empty_indicator_code`, must not be `None`")  # noqa: E501

        self._empty_indicator_code = empty_indicator_code

    @property
    def transport_call_id(self) -> Object:
        """Gets the transport_call_id of this BaseEquipmentEvent.


        :return: The transport_call_id of this BaseEquipmentEvent.
        :rtype: Object
        """
        return self._transport_call_id

    @transport_call_id.setter
    def transport_call_id(self, transport_call_id: Object):
        """Sets the transport_call_id of this BaseEquipmentEvent.


        :param transport_call_id: The transport_call_id of this BaseEquipmentEvent.
        :type transport_call_id: Object
        """

        self._transport_call_id = transport_call_id

    @property
    def transport_call(self) -> TransportCall:
        """Gets the transport_call of this BaseEquipmentEvent.


        :return: The transport_call of this BaseEquipmentEvent.
        :rtype: TransportCall
        """
        return self._transport_call

    @transport_call.setter
    def transport_call(self, transport_call: TransportCall):
        """Sets the transport_call of this BaseEquipmentEvent.


        :param transport_call: The transport_call of this BaseEquipmentEvent.
        :type transport_call: TransportCall
        """
        if transport_call is None:
            raise ValueError("Invalid value for `transport_call`, must not be `None`")  # noqa: E501

        self._transport_call = transport_call

    @property
    def document_references(self) -> DocumentReferences:
        """Gets the document_references of this BaseEquipmentEvent.


        :return: The document_references of this BaseEquipmentEvent.
        :rtype: DocumentReferences
        """
        return self._document_references

    @document_references.setter
    def document_references(self, document_references: DocumentReferences):
        """Sets the document_references of this BaseEquipmentEvent.


        :param document_references: The document_references of this BaseEquipmentEvent.
        :type document_references: DocumentReferences
        """

        self._document_references = document_references

    @property
    def event_type_code(self) -> str:
        """Gets the event_type_code of this BaseEquipmentEvent.

        Unique identifier for Event Type Code, for transport events this is either - LOAD (Loaded) - DISC (Discharged) - GTIN (Gated in) - GTOT (Gated out) - STUF (Stuffed) - STRP (Stripped)  Deprecated - use equipmentEventTypeCode instead   # noqa: E501

        :return: The event_type_code of this BaseEquipmentEvent.
        :rtype: str
        """
        return self._event_type_code

    @event_type_code.setter
    def event_type_code(self, event_type_code: str):
        """Sets the event_type_code of this BaseEquipmentEvent.

        Unique identifier for Event Type Code, for transport events this is either - LOAD (Loaded) - DISC (Discharged) - GTIN (Gated in) - GTOT (Gated out) - STUF (Stuffed) - STRP (Stripped)  Deprecated - use equipmentEventTypeCode instead   # noqa: E501

        :param event_type_code: The event_type_code of this BaseEquipmentEvent.
        :type event_type_code: str
        """

        self._event_type_code = event_type_code
