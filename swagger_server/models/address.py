# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.city_name import CityName  # noqa: F401,E501
from swagger_server.models.country import Country  # noqa: F401,E501
from swagger_server.models.floor import Floor  # noqa: F401,E501
from swagger_server.models.post_code import PostCode  # noqa: F401,E501
from swagger_server.models.state_region import StateRegion  # noqa: F401,E501
from swagger_server.models.street_name import StreetName  # noqa: F401,E501
from swagger_server.models.street_number import StreetNumber  # noqa: F401,E501
from swagger_server import util


class Address(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, street: StreetName=None, street_number: StreetNumber=None, floor: Floor=None, post_code: PostCode=None, city: CityName=None, state_region: StateRegion=None, country: Country=None):  # noqa: E501
        """Address - a model defined in Swagger

        :param street: The street of this Address.  # noqa: E501
        :type street: StreetName
        :param street_number: The street_number of this Address.  # noqa: E501
        :type street_number: StreetNumber
        :param floor: The floor of this Address.  # noqa: E501
        :type floor: Floor
        :param post_code: The post_code of this Address.  # noqa: E501
        :type post_code: PostCode
        :param city: The city of this Address.  # noqa: E501
        :type city: CityName
        :param state_region: The state_region of this Address.  # noqa: E501
        :type state_region: StateRegion
        :param country: The country of this Address.  # noqa: E501
        :type country: Country
        """
        self.swagger_types = {
            'street': StreetName,
            'street_number': StreetNumber,
            'floor': Floor,
            'post_code': PostCode,
            'city': CityName,
            'state_region': StateRegion,
            'country': Country
        }

        self.attribute_map = {
            'street': 'street',
            'street_number': 'streetNumber',
            'floor': 'floor',
            'post_code': 'postCode',
            'city': 'city',
            'state_region': 'stateRegion',
            'country': 'country'
        }
        self._street = street
        self._street_number = street_number
        self._floor = floor
        self._post_code = post_code
        self._city = city
        self._state_region = state_region
        self._country = country

    @classmethod
    def from_dict(cls, dikt) -> 'Address':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The address of this Address.  # noqa: E501
        :rtype: Address
        """
        return util.deserialize_model(dikt, cls)

    @property
    def street(self) -> StreetName:
        """Gets the street of this Address.


        :return: The street of this Address.
        :rtype: StreetName
        """
        return self._street

    @street.setter
    def street(self, street: StreetName):
        """Sets the street of this Address.


        :param street: The street of this Address.
        :type street: StreetName
        """

        self._street = street

    @property
    def street_number(self) -> StreetNumber:
        """Gets the street_number of this Address.


        :return: The street_number of this Address.
        :rtype: StreetNumber
        """
        return self._street_number

    @street_number.setter
    def street_number(self, street_number: StreetNumber):
        """Sets the street_number of this Address.


        :param street_number: The street_number of this Address.
        :type street_number: StreetNumber
        """

        self._street_number = street_number

    @property
    def floor(self) -> Floor:
        """Gets the floor of this Address.


        :return: The floor of this Address.
        :rtype: Floor
        """
        return self._floor

    @floor.setter
    def floor(self, floor: Floor):
        """Sets the floor of this Address.


        :param floor: The floor of this Address.
        :type floor: Floor
        """

        self._floor = floor

    @property
    def post_code(self) -> PostCode:
        """Gets the post_code of this Address.


        :return: The post_code of this Address.
        :rtype: PostCode
        """
        return self._post_code

    @post_code.setter
    def post_code(self, post_code: PostCode):
        """Sets the post_code of this Address.


        :param post_code: The post_code of this Address.
        :type post_code: PostCode
        """

        self._post_code = post_code

    @property
    def city(self) -> CityName:
        """Gets the city of this Address.


        :return: The city of this Address.
        :rtype: CityName
        """
        return self._city

    @city.setter
    def city(self, city: CityName):
        """Sets the city of this Address.


        :param city: The city of this Address.
        :type city: CityName
        """

        self._city = city

    @property
    def state_region(self) -> StateRegion:
        """Gets the state_region of this Address.


        :return: The state_region of this Address.
        :rtype: StateRegion
        """
        return self._state_region

    @state_region.setter
    def state_region(self, state_region: StateRegion):
        """Sets the state_region of this Address.


        :param state_region: The state_region of this Address.
        :type state_region: StateRegion
        """

        self._state_region = state_region

    @property
    def country(self) -> Country:
        """Gets the country of this Address.


        :return: The country of this Address.
        :rtype: Country
        """
        return self._country

    @country.setter
    def country(self, country: Country):
        """Sets the country of this Address.


        :param country: The country of this Address.
        :type country: Country
        """

        self._country = country
