# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.event_classifier_code import EventClassifierCode  # noqa: F401,E501
from swagger_server.models.event_date_time import EventDateTime  # noqa: F401,E501
from swagger_server import util


class BaseEventBody(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, event_classifier_code: EventClassifierCode=None, event_date_time: EventDateTime=None):  # noqa: E501
        """BaseEventBody - a model defined in Swagger

        :param event_classifier_code: The event_classifier_code of this BaseEventBody.  # noqa: E501
        :type event_classifier_code: EventClassifierCode
        :param event_date_time: The event_date_time of this BaseEventBody.  # noqa: E501
        :type event_date_time: EventDateTime
        """
        self.swagger_types = {
            'event_classifier_code': EventClassifierCode,
            'event_date_time': EventDateTime
        }

        self.attribute_map = {
            'event_classifier_code': 'eventClassifierCode',
            'event_date_time': 'eventDateTime'
        }
        self._event_classifier_code = event_classifier_code
        self._event_date_time = event_date_time

    @classmethod
    def from_dict(cls, dikt) -> 'BaseEventBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The baseEventBody of this BaseEventBody.  # noqa: E501
        :rtype: BaseEventBody
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_classifier_code(self) -> EventClassifierCode:
        """Gets the event_classifier_code of this BaseEventBody.


        :return: The event_classifier_code of this BaseEventBody.
        :rtype: EventClassifierCode
        """
        return self._event_classifier_code

    @event_classifier_code.setter
    def event_classifier_code(self, event_classifier_code: EventClassifierCode):
        """Sets the event_classifier_code of this BaseEventBody.


        :param event_classifier_code: The event_classifier_code of this BaseEventBody.
        :type event_classifier_code: EventClassifierCode
        """
        if event_classifier_code is None:
            raise ValueError("Invalid value for `event_classifier_code`, must not be `None`")  # noqa: E501

        self._event_classifier_code = event_classifier_code

    @property
    def event_date_time(self) -> EventDateTime:
        """Gets the event_date_time of this BaseEventBody.


        :return: The event_date_time of this BaseEventBody.
        :rtype: EventDateTime
        """
        return self._event_date_time

    @event_date_time.setter
    def event_date_time(self, event_date_time: EventDateTime):
        """Sets the event_date_time of this BaseEventBody.


        :param event_date_time: The event_date_time of this BaseEventBody.
        :type event_date_time: EventDateTime
        """
        if event_date_time is None:
            raise ValueError("Invalid value for `event_date_time`, must not be `None`")  # noqa: E501

        self._event_date_time = event_date_time
