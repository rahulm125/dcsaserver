# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.change_remark import ChangeRemark  # noqa: F401,E501
from swagger_server.models.delay_reason_code import DelayReasonCode  # noqa: F401,E501
from swagger_server.models.transport_call import TransportCall  # noqa: F401,E501
from swagger_server.models.transport_event_type_code import TransportEventTypeCode  # noqa: F401,E501
from swagger_server import util


class BaseTransportEvent(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, event_classifier_code: str=None, transport_event_type_code: TransportEventTypeCode=None, delay_reason_code: DelayReasonCode=None, change_remark: ChangeRemark=None, transport_call: TransportCall=None):  # noqa: E501
        """BaseTransportEvent - a model defined in Swagger

        :param event_classifier_code: The event_classifier_code of this BaseTransportEvent.  # noqa: E501
        :type event_classifier_code: str
        :param transport_event_type_code: The transport_event_type_code of this BaseTransportEvent.  # noqa: E501
        :type transport_event_type_code: TransportEventTypeCode
        :param delay_reason_code: The delay_reason_code of this BaseTransportEvent.  # noqa: E501
        :type delay_reason_code: DelayReasonCode
        :param change_remark: The change_remark of this BaseTransportEvent.  # noqa: E501
        :type change_remark: ChangeRemark
        :param transport_call: The transport_call of this BaseTransportEvent.  # noqa: E501
        :type transport_call: TransportCall
        """
        self.swagger_types = {
            'event_classifier_code': str,
            'transport_event_type_code': TransportEventTypeCode,
            'delay_reason_code': DelayReasonCode,
            'change_remark': ChangeRemark,
            'transport_call': TransportCall
        }

        self.attribute_map = {
            'event_classifier_code': 'eventClassifierCode',
            'transport_event_type_code': 'transportEventTypeCode',
            'delay_reason_code': 'delayReasonCode',
            'change_remark': 'changeRemark',
            'transport_call': 'transportCall'
        }
        self._event_classifier_code = event_classifier_code
        self._transport_event_type_code = transport_event_type_code
        self._delay_reason_code = delay_reason_code
        self._change_remark = change_remark
        self._transport_call = transport_call

    @classmethod
    def from_dict(cls, dikt) -> 'BaseTransportEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The baseTransportEvent of this BaseTransportEvent.  # noqa: E501
        :rtype: BaseTransportEvent
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_classifier_code(self) -> str:
        """Gets the event_classifier_code of this BaseTransportEvent.

        Code for the event classifier can be - ACT (Actual) - PLN (Planned) - EST (Estimated)   # noqa: E501

        :return: The event_classifier_code of this BaseTransportEvent.
        :rtype: str
        """
        return self._event_classifier_code

    @event_classifier_code.setter
    def event_classifier_code(self, event_classifier_code: str):
        """Sets the event_classifier_code of this BaseTransportEvent.

        Code for the event classifier can be - ACT (Actual) - PLN (Planned) - EST (Estimated)   # noqa: E501

        :param event_classifier_code: The event_classifier_code of this BaseTransportEvent.
        :type event_classifier_code: str
        """

        self._event_classifier_code = event_classifier_code

    @property
    def transport_event_type_code(self) -> TransportEventTypeCode:
        """Gets the transport_event_type_code of this BaseTransportEvent.


        :return: The transport_event_type_code of this BaseTransportEvent.
        :rtype: TransportEventTypeCode
        """
        return self._transport_event_type_code

    @transport_event_type_code.setter
    def transport_event_type_code(self, transport_event_type_code: TransportEventTypeCode):
        """Sets the transport_event_type_code of this BaseTransportEvent.


        :param transport_event_type_code: The transport_event_type_code of this BaseTransportEvent.
        :type transport_event_type_code: TransportEventTypeCode
        """
        if transport_event_type_code is None:
            raise ValueError("Invalid value for `transport_event_type_code`, must not be `None`")  # noqa: E501

        self._transport_event_type_code = transport_event_type_code

    @property
    def delay_reason_code(self) -> DelayReasonCode:
        """Gets the delay_reason_code of this BaseTransportEvent.


        :return: The delay_reason_code of this BaseTransportEvent.
        :rtype: DelayReasonCode
        """
        return self._delay_reason_code

    @delay_reason_code.setter
    def delay_reason_code(self, delay_reason_code: DelayReasonCode):
        """Sets the delay_reason_code of this BaseTransportEvent.


        :param delay_reason_code: The delay_reason_code of this BaseTransportEvent.
        :type delay_reason_code: DelayReasonCode
        """

        self._delay_reason_code = delay_reason_code

    @property
    def change_remark(self) -> ChangeRemark:
        """Gets the change_remark of this BaseTransportEvent.


        :return: The change_remark of this BaseTransportEvent.
        :rtype: ChangeRemark
        """
        return self._change_remark

    @change_remark.setter
    def change_remark(self, change_remark: ChangeRemark):
        """Sets the change_remark of this BaseTransportEvent.


        :param change_remark: The change_remark of this BaseTransportEvent.
        :type change_remark: ChangeRemark
        """

        self._change_remark = change_remark

    @property
    def transport_call(self) -> TransportCall:
        """Gets the transport_call of this BaseTransportEvent.


        :return: The transport_call of this BaseTransportEvent.
        :rtype: TransportCall
        """
        return self._transport_call

    @transport_call.setter
    def transport_call(self, transport_call: TransportCall):
        """Sets the transport_call of this BaseTransportEvent.


        :param transport_call: The transport_call of this BaseTransportEvent.
        :type transport_call: TransportCall
        """
        if transport_call is None:
            raise ValueError("Invalid value for `transport_call`, must not be `None`")  # noqa: E501

        self._transport_call = transport_call
