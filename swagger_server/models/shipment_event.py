# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.base_event import BaseEvent  # noqa: F401,E501
from swagger_server.models.base_shipment_event import BaseShipmentEvent  # noqa: F401,E501
from swagger_server.models.document_id import DocumentID  # noqa: F401,E501
from swagger_server.models.document_type_code import DocumentTypeCode  # noqa: F401,E501
from swagger_server.models.event_created_date_time import EventCreatedDateTime  # noqa: F401,E501
from swagger_server.models.reason import Reason  # noqa: F401,E501
from swagger_server.models.reference import Reference  # noqa: F401,E501
from swagger_server.models.shipment_event_type_code import ShipmentEventTypeCode  # noqa: F401,E501
from swagger_server.models.shipment_information_type import ShipmentInformationType  # noqa: F401,E501
from swagger_server import util


class ShipmentEvent(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, event_date_time: Object=None, event_classifier_code: str=None, shipment_event_type_code: ShipmentEventTypeCode=None, document_id: DocumentID=None, document_type_code: DocumentTypeCode=None, shipment_information_type_code: ShipmentInformationType=None, reason: Reason=None, event_type_code: str=None, shipment_id: Object=None, references: List[Reference]=None, event_created_date_time: EventCreatedDateTime=None):  # noqa: E501
        """ShipmentEvent - a model defined in Swagger

        :param event_date_time: The event_date_time of this ShipmentEvent.  # noqa: E501
        :type event_date_time: Object
        :param event_classifier_code: The event_classifier_code of this ShipmentEvent.  # noqa: E501
        :type event_classifier_code: str
        :param shipment_event_type_code: The shipment_event_type_code of this ShipmentEvent.  # noqa: E501
        :type shipment_event_type_code: ShipmentEventTypeCode
        :param document_id: The document_id of this ShipmentEvent.  # noqa: E501
        :type document_id: DocumentID
        :param document_type_code: The document_type_code of this ShipmentEvent.  # noqa: E501
        :type document_type_code: DocumentTypeCode
        :param shipment_information_type_code: The shipment_information_type_code of this ShipmentEvent.  # noqa: E501
        :type shipment_information_type_code: ShipmentInformationType
        :param reason: The reason of this ShipmentEvent.  # noqa: E501
        :type reason: Reason
        :param event_type_code: The event_type_code of this ShipmentEvent.  # noqa: E501
        :type event_type_code: str
        :param shipment_id: The shipment_id of this ShipmentEvent.  # noqa: E501
        :type shipment_id: Object
        :param references: The references of this ShipmentEvent.  # noqa: E501
        :type references: List[Reference]
        :param event_created_date_time: The event_created_date_time of this ShipmentEvent.  # noqa: E501
        :type event_created_date_time: EventCreatedDateTime
        """
        self.swagger_types = {
            'event_date_time': Object,
            'event_classifier_code': str,
            'shipment_event_type_code': ShipmentEventTypeCode,
            'document_id': DocumentID,
            'document_type_code': DocumentTypeCode,
            'shipment_information_type_code': ShipmentInformationType,
            'reason': Reason,
            'event_type_code': str,
            'shipment_id': Object,
            'references': List[Reference],
            'event_created_date_time': EventCreatedDateTime
        }

        self.attribute_map = {
            'event_date_time': 'eventDateTime',
            'event_classifier_code': 'eventClassifierCode',
            'shipment_event_type_code': 'shipmentEventTypeCode',
            'document_id': 'documentID',
            'document_type_code': 'documentTypeCode',
            'shipment_information_type_code': 'shipmentInformationTypeCode',
            'reason': 'reason',
            'event_type_code': 'eventTypeCode',
            'shipment_id': 'shipmentID',
            'references': 'references',
            'event_created_date_time': 'eventCreatedDateTime'
        }
        self._event_date_time = event_date_time
        self._event_classifier_code = event_classifier_code
        self._shipment_event_type_code = shipment_event_type_code
        self._document_id = document_id
        self._document_type_code = document_type_code
        self._shipment_information_type_code = shipment_information_type_code
        self._reason = reason
        self._event_type_code = event_type_code
        self._shipment_id = shipment_id
        self._references = references
        self._event_created_date_time = event_created_date_time

    @classmethod
    def from_dict(cls, dikt) -> 'ShipmentEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The shipmentEvent of this ShipmentEvent.  # noqa: E501
        :rtype: ShipmentEvent
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_date_time(self) -> Object:
        """Gets the event_date_time of this ShipmentEvent.

        Value for eventDateTime must be the same value as eventCreatedDateTime   # noqa: E501

        :return: The event_date_time of this ShipmentEvent.
        :rtype: Object
        """
        return self._event_date_time

    @event_date_time.setter
    def event_date_time(self, event_date_time: Object):
        """Sets the event_date_time of this ShipmentEvent.

        Value for eventDateTime must be the same value as eventCreatedDateTime   # noqa: E501

        :param event_date_time: The event_date_time of this ShipmentEvent.
        :type event_date_time: Object
        """
        if event_date_time is None:
            raise ValueError("Invalid value for `event_date_time`, must not be `None`")  # noqa: E501

        self._event_date_time = event_date_time

    @property
    def event_classifier_code(self) -> str:
        """Gets the event_classifier_code of this ShipmentEvent.

        Code for the event classifier can be - ACT (Actual) - PLN (Planned) - EST (Estimated)   # noqa: E501

        :return: The event_classifier_code of this ShipmentEvent.
        :rtype: str
        """
        return self._event_classifier_code

    @event_classifier_code.setter
    def event_classifier_code(self, event_classifier_code: str):
        """Sets the event_classifier_code of this ShipmentEvent.

        Code for the event classifier can be - ACT (Actual) - PLN (Planned) - EST (Estimated)   # noqa: E501

        :param event_classifier_code: The event_classifier_code of this ShipmentEvent.
        :type event_classifier_code: str
        """
        if event_classifier_code is None:
            raise ValueError("Invalid value for `event_classifier_code`, must not be `None`")  # noqa: E501

        self._event_classifier_code = event_classifier_code

    @property
    def shipment_event_type_code(self) -> ShipmentEventTypeCode:
        """Gets the shipment_event_type_code of this ShipmentEvent.


        :return: The shipment_event_type_code of this ShipmentEvent.
        :rtype: ShipmentEventTypeCode
        """
        return self._shipment_event_type_code

    @shipment_event_type_code.setter
    def shipment_event_type_code(self, shipment_event_type_code: ShipmentEventTypeCode):
        """Sets the shipment_event_type_code of this ShipmentEvent.


        :param shipment_event_type_code: The shipment_event_type_code of this ShipmentEvent.
        :type shipment_event_type_code: ShipmentEventTypeCode
        """
        if shipment_event_type_code is None:
            raise ValueError("Invalid value for `shipment_event_type_code`, must not be `None`")  # noqa: E501

        self._shipment_event_type_code = shipment_event_type_code

    @property
    def document_id(self) -> DocumentID:
        """Gets the document_id of this ShipmentEvent.


        :return: The document_id of this ShipmentEvent.
        :rtype: DocumentID
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id: DocumentID):
        """Sets the document_id of this ShipmentEvent.


        :param document_id: The document_id of this ShipmentEvent.
        :type document_id: DocumentID
        """
        if document_id is None:
            raise ValueError("Invalid value for `document_id`, must not be `None`")  # noqa: E501

        self._document_id = document_id

    @property
    def document_type_code(self) -> DocumentTypeCode:
        """Gets the document_type_code of this ShipmentEvent.


        :return: The document_type_code of this ShipmentEvent.
        :rtype: DocumentTypeCode
        """
        return self._document_type_code

    @document_type_code.setter
    def document_type_code(self, document_type_code: DocumentTypeCode):
        """Sets the document_type_code of this ShipmentEvent.


        :param document_type_code: The document_type_code of this ShipmentEvent.
        :type document_type_code: DocumentTypeCode
        """
        if document_type_code is None:
            raise ValueError("Invalid value for `document_type_code`, must not be `None`")  # noqa: E501

        self._document_type_code = document_type_code

    @property
    def shipment_information_type_code(self) -> ShipmentInformationType:
        """Gets the shipment_information_type_code of this ShipmentEvent.


        :return: The shipment_information_type_code of this ShipmentEvent.
        :rtype: ShipmentInformationType
        """
        return self._shipment_information_type_code

    @shipment_information_type_code.setter
    def shipment_information_type_code(self, shipment_information_type_code: ShipmentInformationType):
        """Sets the shipment_information_type_code of this ShipmentEvent.


        :param shipment_information_type_code: The shipment_information_type_code of this ShipmentEvent.
        :type shipment_information_type_code: ShipmentInformationType
        """

        self._shipment_information_type_code = shipment_information_type_code

    @property
    def reason(self) -> Reason:
        """Gets the reason of this ShipmentEvent.


        :return: The reason of this ShipmentEvent.
        :rtype: Reason
        """
        return self._reason

    @reason.setter
    def reason(self, reason: Reason):
        """Sets the reason of this ShipmentEvent.


        :param reason: The reason of this ShipmentEvent.
        :type reason: Reason
        """

        self._reason = reason

    @property
    def event_type_code(self) -> str:
        """Gets the event_type_code of this ShipmentEvent.

        Unique identifier for Event Type Code. For shipment events this can be - RECE (Received) - CONF (Confirmed) - ISSU (Issued) - APPR (Approved) - SUBM (Submitted) - SURR (Surrendered) - REJE (Rejected) - PENA (Pending approval)  Deprecated - use shipmentEventTypeCode instead   # noqa: E501

        :return: The event_type_code of this ShipmentEvent.
        :rtype: str
        """
        return self._event_type_code

    @event_type_code.setter
    def event_type_code(self, event_type_code: str):
        """Sets the event_type_code of this ShipmentEvent.

        Unique identifier for Event Type Code. For shipment events this can be - RECE (Received) - CONF (Confirmed) - ISSU (Issued) - APPR (Approved) - SUBM (Submitted) - SURR (Surrendered) - REJE (Rejected) - PENA (Pending approval)  Deprecated - use shipmentEventTypeCode instead   # noqa: E501

        :param event_type_code: The event_type_code of this ShipmentEvent.
        :type event_type_code: str
        """

        self._event_type_code = event_type_code

    @property
    def shipment_id(self) -> Object:
        """Gets the shipment_id of this ShipmentEvent.

        ID uniquely identifying a shipment.  Deprecated - this is replaced by documentID which can contain different values depending on the value of the documentTypeCode field   # noqa: E501

        :return: The shipment_id of this ShipmentEvent.
        :rtype: Object
        """
        return self._shipment_id

    @shipment_id.setter
    def shipment_id(self, shipment_id: Object):
        """Sets the shipment_id of this ShipmentEvent.

        ID uniquely identifying a shipment.  Deprecated - this is replaced by documentID which can contain different values depending on the value of the documentTypeCode field   # noqa: E501

        :param shipment_id: The shipment_id of this ShipmentEvent.
        :type shipment_id: Object
        """

        self._shipment_id = shipment_id

    @property
    def references(self) -> List[Reference]:
        """Gets the references of this ShipmentEvent.


        :return: The references of this ShipmentEvent.
        :rtype: List[Reference]
        """
        return self._references

    @references.setter
    def references(self, references: List[Reference]):
        """Sets the references of this ShipmentEvent.


        :param references: The references of this ShipmentEvent.
        :type references: List[Reference]
        """

        self._references = references

    @property
    def event_created_date_time(self) -> EventCreatedDateTime:
        """Gets the event_created_date_time of this ShipmentEvent.


        :return: The event_created_date_time of this ShipmentEvent.
        :rtype: EventCreatedDateTime
        """
        return self._event_created_date_time

    @event_created_date_time.setter
    def event_created_date_time(self, event_created_date_time: EventCreatedDateTime):
        """Sets the event_created_date_time of this ShipmentEvent.


        :param event_created_date_time: The event_created_date_time of this ShipmentEvent.
        :type event_created_date_time: EventCreatedDateTime
        """
        if event_created_date_time is None:
            raise ValueError("Invalid value for `event_created_date_time`, must not be `None`")  # noqa: E501

        self._event_created_date_time = event_created_date_time
